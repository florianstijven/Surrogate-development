})
mu<- c( abs(simulation_results[[i]]$mu)[,1]  )
Sigma<-simulation_results[[i]]$Sigma
Sigma<- abs(Sigma)
is.positive.definite(Sigma)
convert_mu_1<- log( (mu)^2/ sqrt( (mu)^2+ diag(Sigma) ))
##convert parameter
var11<- log(1+ ( Sigma[1,1] / mu[1]^2) )
var22<- log(1+ ( Sigma[2,2] / mu[2]^2) )
var33<- log(1+ ( Sigma[3,3] / mu[3]^2) )
var44<- log(1+ ( Sigma[4,4] / mu[4]^2) )
var12<- log(1+ ( Sigma[1,2]/  (mu[1]*mu[2])) )
var13<- log(1+ ( Sigma[1,3] / (mu[1]*mu[3])) )
var14<- log(1+ ( Sigma[1,4] / (mu[1]*mu[4])) )
var23<- log(1+ ( Sigma[2,3] / (mu[2]*mu[3])) )
var24<- log(1+ ( Sigma[2,4] / (mu[2]*mu[4])) )
var34<- log(1+ ( Sigma[3,4]/  (mu[3]*mu[4])) )
cov_convert_sigma_1<- matrix( c( var11, var12, var13, var14,
var12, var22, var23, var24,
var13, var23, var33, var34,
var14, var24, var34, var44), nrow = 4, ncol = 4)
is.positive.definite(cov_convert_sigma_1)
i<-2
mu<- c( abs(simulation_results[[i]]$mu)[,1]  )
Sigma<-simulation_results[[i]]$Sigma
Sigma<- abs(Sigma)
is.positive.definite(Sigma)
#TO CONVERT PARAMETER
convert_mu_1<- log( (mu)^2/ sqrt( (mu)^2+ diag(Sigma) ))
##convert parameter
var11<- log(1+ ( Sigma[1,1] / mu[1]^2) )
var22<- log(1+ ( Sigma[2,2] / mu[2]^2) )
var33<- log(1+ ( Sigma[3,3] / mu[3]^2) )
var44<- log(1+ ( Sigma[4,4] / mu[4]^2) )
var12<- log(1+ ( Sigma[1,2]/  (mu[1]*mu[2])) )
var13<- log(1+ ( Sigma[1,3] / (mu[1]*mu[3])) )
var14<- log(1+ ( Sigma[1,4] / (mu[1]*mu[4])) )
var23<- log(1+ ( Sigma[2,3] / (mu[2]*mu[3])) )
var24<- log(1+ ( Sigma[2,4] / (mu[2]*mu[4])) )
var34<- log(1+ ( Sigma[3,4]/  (mu[3]*mu[4])) )
cov_convert_sigma_1<- matrix( c( var11, var12, var13, var14,
var12, var22, var23, var24,
var13, var23, var33, var34,
var14, var24, var34, var44), nrow = 4, ncol = 4)
is.positive.definite(cov_convert_sigma_1)
data_log<-  rlnorm.rplus(1e5,convert_mu_1,cov_convert_sigma_1)
T0<-data_log[,1]
T1<-data_log[,2]
S0<-data_log[,3]
S1<-data_log[,4]
delta_T<- T1-T0
delta_S<- S1-S0
rho<- cor(delta_T, delta_S)
ICA_normal_2<- rho^2
mutual_info_2<- mutinfo(delta_T, delta_S, k=10, direct=FALSE)
mutual_info_2<- mean(mutual_info_2)
ICA_lognormal_2<- 1-exp(-2*mutual_info_2)
diff<- ICA_lognormal_2- ICA_normal_2
rel_diff<- (ICA_lognormal_2- ICA_normal_2)/2
f_multi_lognormal<- function(X) {
x <- c(X[1], X[2], X[3],X[4])
dlnorm.rplus(x,convert_mu_1,cov_convert_sigma_1) }
f_multi_normal<- function(X) {
x <- c(X[1], X[2], X[3],X[4])
dmvnorm(x, mu, Sigma, log = FALSE, tol = 1e-06) }
f_average<- function(x) (f_multi_lognormal(x)+f_multi_normal(x))/2
lower_limit<- c(0,0,0,0)
upper_limit = c((mu[1]+3*Sigma[1,1]+15),(mu[2]+3*Sigma[2,2]+15),(mu[3]+3*Sigma[3,3]+15),(mu[4]+3*Sigma[4,4]+15))
KL_fun1<- function(X) {
f_multi_lognormal(X)* log(f_multi_lognormal(X)/f_multi_normal(X)) }
int1<- adaptIntegrate(KL_fun1, lowerLimit = lower_limit, upperLimit = upper_limit)
KL1<- int1$integral
KL1
lower_limit<- c(1,1,1,1)
KL_fun1<- function(X) {
f_multi_lognormal(X)* log(f_multi_lognormal(X)/f_multi_normal(X)) }
int1<- adaptIntegrate(KL_fun1, lowerLimit = lower_limit, upperLimit = upper_limit)
KL1<- int1$integral
upper_limit
KL_fun1<- function(X) {
f_multi_lognormal(X)* log(f_multi_lognormal(X)/f_multi_normal(X)) }
int1<- adaptIntegrate(KL_fun1, lowerLimit = lower_limit, upperLimit = upper_limit)
KL1<- int1$integral
KL1
lower_limit
lower_limit<- c(0,0,0,0)
upper_limit = c((mu[1]+3*Sigma[1,1]),(mu[2]+3*Sigma[2,2]),(mu[3]+3*Sigma[3,3]),(mu[4]+3*Sigma[4,4]))
KL_fun1<- function(X) {
f_multi_lognormal(X)* log(f_multi_lognormal(X)/f_multi_normal(X)) }
int1<- adaptIntegrate(KL_fun1, lowerLimit = lower_limit, upperLimit = upper_limit)
KL1<- int1$integral
KL1
KL_fun1<- function(X) {
f_multi_lognormal(X)* log(f_multi_lognormal(X)/f_multi_normal(X)) }
int1<- adaptIntegrate(KL_fun1, lowerLimit = lower_limit, upperLimit = upper_limit)
lower_limit<- c(1,1,1,1)
lower_limit
upper_limit
int1<- adaptIntegrate(KL_fun1, lowerLimit = lower_limit, upperLimit = upper_limit)
upper_limit = c((mu[1]+3*Sigma[1,1]-1),(mu[2]+3*Sigma[2,2]-1),(mu[3]+3*Sigma[3,3]-1),(mu[4]+3*Sigma[4,4]-1))
int1<- adaptIntegrate(KL_fun1, lowerLimit = lower_limit, upperLimit = upper_limit)
i<-12
mu<- c( abs(simulation_results[[i]]$mu)[,1]  )
Sigma<-simulation_results[[i]]$Sigma
Sigma<- abs(Sigma)
is.positive.definite(Sigma)
#TO CONVERT PARAMETER
convert_mu_1<- log( (mu)^2/ sqrt( (mu)^2+ diag(Sigma) ))
##convert parameter
var11<- log(1+ ( Sigma[1,1] / mu[1]^2) )
var22<- log(1+ ( Sigma[2,2] / mu[2]^2) )
var33<- log(1+ ( Sigma[3,3] / mu[3]^2) )
var44<- log(1+ ( Sigma[4,4] / mu[4]^2) )
var12<- log(1+ ( Sigma[1,2]/  (mu[1]*mu[2])) )
var13<- log(1+ ( Sigma[1,3] / (mu[1]*mu[3])) )
var14<- log(1+ ( Sigma[1,4] / (mu[1]*mu[4])) )
var23<- log(1+ ( Sigma[2,3] / (mu[2]*mu[3])) )
var24<- log(1+ ( Sigma[2,4] / (mu[2]*mu[4])) )
var34<- log(1+ ( Sigma[3,4]/  (mu[3]*mu[4])) )
cov_convert_sigma_1<- matrix( c( var11, var12, var13, var14,
var12, var22, var23, var24,
var13, var23, var33, var34,
var14, var24, var34, var44), nrow = 4, ncol = 4)
is.positive.definite(cov_convert_sigma_1)
i<-15
mu<- c( abs(simulation_results[[i]]$mu)[,1]  )
Sigma<-simulation_results[[i]]$Sigma
Sigma<- abs(Sigma)
is.positive.definite(Sigma)
#TO CONVERT PARAMETER
convert_mu_1<- log( (mu)^2/ sqrt( (mu)^2+ diag(Sigma) ))
##convert parameter
var11<- log(1+ ( Sigma[1,1] / mu[1]^2) )
var22<- log(1+ ( Sigma[2,2] / mu[2]^2) )
var33<- log(1+ ( Sigma[3,3] / mu[3]^2) )
var44<- log(1+ ( Sigma[4,4] / mu[4]^2) )
var12<- log(1+ ( Sigma[1,2]/  (mu[1]*mu[2])) )
var13<- log(1+ ( Sigma[1,3] / (mu[1]*mu[3])) )
var14<- log(1+ ( Sigma[1,4] / (mu[1]*mu[4])) )
var23<- log(1+ ( Sigma[2,3] / (mu[2]*mu[3])) )
var24<- log(1+ ( Sigma[2,4] / (mu[2]*mu[4])) )
var34<- log(1+ ( Sigma[3,4]/  (mu[3]*mu[4])) )
cov_convert_sigma_1<- matrix( c( var11, var12, var13, var14,
var12, var22, var23, var24,
var13, var23, var33, var34,
var14, var24, var34, var44), nrow = 4, ncol = 4)
is.positive.definite(cov_convert_sigma_1)
i<-16
mu<- c( abs(simulation_results[[i]]$mu)[,1]  )
Sigma<-simulation_results[[i]]$Sigma
Sigma<- abs(Sigma)
is.positive.definite(Sigma)
#TO CONVERT PARAMETER
convert_mu_1<- log( (mu)^2/ sqrt( (mu)^2+ diag(Sigma) ))
##convert parameter
var11<- log(1+ ( Sigma[1,1] / mu[1]^2) )
var22<- log(1+ ( Sigma[2,2] / mu[2]^2) )
var33<- log(1+ ( Sigma[3,3] / mu[3]^2) )
var44<- log(1+ ( Sigma[4,4] / mu[4]^2) )
var12<- log(1+ ( Sigma[1,2]/  (mu[1]*mu[2])) )
var13<- log(1+ ( Sigma[1,3] / (mu[1]*mu[3])) )
var14<- log(1+ ( Sigma[1,4] / (mu[1]*mu[4])) )
var23<- log(1+ ( Sigma[2,3] / (mu[2]*mu[3])) )
var24<- log(1+ ( Sigma[2,4] / (mu[2]*mu[4])) )
var34<- log(1+ ( Sigma[3,4]/  (mu[3]*mu[4])) )
cov_convert_sigma_1<- matrix( c( var11, var12, var13, var14,
var12, var22, var23, var24,
var13, var23, var33, var34,
var14, var24, var34, var44), nrow = 4, ncol = 4)
is.positive.definite(cov_convert_sigma_1)
data_log<-  rlnorm.rplus(1e5,convert_mu_1,cov_convert_sigma_1)
T0<-data_log[,1]
T1<-data_log[,2]
S0<-data_log[,3]
S1<-data_log[,4]
delta_T<- T1-T0
delta_S<- S1-S0
rho<- cor(delta_T, delta_S)
ICA_normal_2<- rho^2
mutual_info_2<- mutinfo(delta_T, delta_S, k=10, direct=FALSE)
mutual_info_2<- mean(mutual_info_2)
ICA_lognormal_2<- 1-exp(-2*mutual_info_2)
diff<- ICA_lognormal_2- ICA_normal_2
rel_diff<- (ICA_lognormal_2- ICA_normal_2)/2
lower_limit<- c(0,0,0,0)
upper_limit = c((mu[1]+3*Sigma[1,1]+15),(mu[2]+3*Sigma[2,2]+15),(mu[3]+3*Sigma[3,3]+15),(mu[4]+3*Sigma[4,4]+15))
f_multi_lognormal<- function(X) {
x <- c(X[1], X[2], X[3],X[4])
dlnorm.rplus(x,convert_mu_1,cov_convert_sigma_1) }
f_multi_normal<- function(X) {
x <- c(X[1], X[2], X[3],X[4])
dmvnorm(x, mu, Sigma, log = FALSE, tol = 1e-06) }
f_average<- function(x) (f_multi_lognormal(x)+f_multi_normal(x))/2
KL_fun1<- function(X) {
f_multi_lognormal(X)* log(f_multi_lognormal(X)/f_multi_normal(X)) }
int1<- adaptIntegrate(KL_fun1, lowerLimit = lower_limit, upperLimit = upper_limit)
KL1<- int1$integral
int1<- adaptIntegrate(KL_fun1, lowerLimit = lower_limit, upperLimit = upper_limit)
lower_limit
upper_limit
lower_limit<- c(0,0,0,0)
int1<- adaptIntegrate(KL_fun1, lowerLimit = lower_limit, upperLimit = upper_limit)
##int high limit
int1_wide<- adaptIntegrate(KL_fun1, lowerLimit = c(0,0,0,0), upperLimit = c(15,15,40,40))
upper_limit = c((mu[1]+3*Sigma[1,1]),(mu[2]+3*Sigma[2,2]),(mu[3]+3*Sigma[3,3]),(mu[4]+3*Sigma[4,4]))
upper_limit
int1<- adaptIntegrate(KL_fun1, lowerLimit = lower_limit, upperLimit = upper_limit)
lower_limit<- c(1,1,1,1)
upper_limit = c((mu[1]+3*Sigma[1,1]-1),(mu[2]+3*Sigma[2,2]-1),(mu[3]+3*Sigma[3,3]-1),(mu[4]+3*Sigma[4,4]-1))
int1<- adaptIntegrate(KL_fun1, lowerLimit = lower_limit, upperLimit = upper_limit)
KL1<- int1$integral
KL_fun1<- function(X) {
f_multi_lognormal(X)* log(f_multi_lognormal(X)/f_multi_normal(X)) }
int1<- adaptIntegrate(KL_fun1, lowerLimit = lower_limit, upperLimit = upper_limit)
KL_fun2<- function(X) {
f_multi_normal(X)* log(f_multi_normal(X)/f_multi_lognormal(X)) }
int2<- adaptIntegrate(KL_fun2, lowerLimit = lower_limit, upperLimit = upper_limit)
KL2<- int2$integral
##jensen functions
js_function1<- function(X) { (f_multi_lognormal(X)* log(f_multi_lognormal(X)/f_average(X))) }
js_function2<- function(X) { (f_multi_normal(X)* log(f_multi_normal(X)/f_average(X))) }
js1<-  adaptIntegrate(js_function1, lowerLimit = lower_limit, upperLimit = upper_limit)
upper_limit = c((mu[1]+3*Sigma[1,1]-1),(mu[2]+3*Sigma[2,2]-1),(mu[3]+3*Sigma[3,3]-1),(mu[4]+3*Sigma[4,4]-1))
int1<- adaptIntegrate(KL_fun1, lowerLimit = lower_limit, upperLimit = upper_limit)
ICA_alpha_ContCont <- function(alpha=numeric(), T0S0, T1S1, T0T0=1, T1T1=1, S0S0=1, S1S1=1,
T0T1=seq(-1, 1, by=.1), T0S1=seq(-1, 1, by=.1), T1S0=seq(-1, 1, by=.1),
S0S1=seq(-1, 1, by=.1)) {
T0S0_hier <- T0S0[1]
T1S1_hier <- T1S1[1]
alpha <- as.numeric(alpha)
length_alpha<- length(alpha)
Results <- na.exclude(matrix(NA, 1, (10+length_alpha)))
colnames_result <- c("T0T1", "T0S0", "T0S1", "T1S0", "T1S1", "S0S1", "sigma.delta.T", "sigma.delta.S", "rho", "ICA")
ica_alpha_cols <- paste0("ICA_", as.character(alpha))
colnames(Results) <- c(colnames_result, ica_alpha_cols)
combins <- expand.grid(T0T1, T0S0_hier, T0S1, T1S0, T1S1_hier, S0S1)
lengte <- dim(combins)[1]
if (length(T0S0)>1){
if (length(T0S0)<lengte){stop("The specified vector for T0S0 should be larger than ", lengte) }
T0S0_vector <- T0S0[1:lengte] # sample
combins[,2] <- T0S0_vector
}
if (length(T1S1)>1){
if (length(T1S1)<lengte){stop("The specified vector for T1S1 should be larger than ", lengte) }
T1S1_vector <- T1S1[1:lengte] # sample
combins[,5] <- T1S1_vector
}
for (i in 1: nrow(combins)) {
T0T1 <- combins[i, 1]
T0S0 <- combins[i, 2]
T0S1 <- combins[i, 3]
T1S0 <- combins[i, 4]
T1S1 <- combins[i, 5]
S0S1 <- combins[i, 6]
Sigma_c <- diag(4)
Sigma_c[2,1] <- Sigma_c[1,2] <- T0T1 * (sqrt(T0T0)*sqrt(T1T1))
Sigma_c[3,1] <- Sigma_c[1,3] <- T0S0 * (sqrt(T0T0)*sqrt(S0S0))
Sigma_c[4,1] <- Sigma_c[1,4] <- T0S1 * (sqrt(T0T0)*sqrt(S1S1))
Sigma_c[3,2] <- Sigma_c[2,3] <- T1S0 * (sqrt(T1T1)*sqrt(S0S0))
Sigma_c[4,2] <- Sigma_c[2,4] <- T1S1 * (sqrt(T1T1)*sqrt(S1S1))
Sigma_c[4,3] <- Sigma_c[3,4] <- S0S1 * (sqrt(S0S0)*sqrt(S1S1))
Sigma_c[1,1] <- T0T0
Sigma_c[2,2] <- T1T1
Sigma_c[3,3] <- S0S0
Sigma_c[4,4] <- S1S1
Cor_c <- cov2cor(Sigma_c)
Min.Eigen.Cor <- try(min(eigen(Cor_c)$values), TRUE)
if (Min.Eigen.Cor > 0) {
rho <- ((sqrt(S0S0*T0T0)*Cor_c[3,1])+(sqrt(S1S1*T1T1)*Cor_c[4,2])-(sqrt(S0S0*T1T1)*Cor_c[3,2])-(sqrt(S1S1*T0T0)*Cor_c[4,1]))/(sqrt((T0T0+T1T1-(2*sqrt(T0T0*T1T1)*Cor_c[2,1]))*(S0S0+S1S1-(2*sqrt(S0S0*S1S1)*Cor_c[4,3]))))
ICA<- rho^2
if ((is.finite(ICA))==TRUE){
sigma.delta.T <- T0T0 + T1T1 - (2 * sqrt(T0T0*T1T1) * Cor_c[2,1])
sigma.delta.S <- S0S0 + S1S1 - (2 * sqrt(S0S0*S1S1) * Cor_c[3,4])
ICA_alpha_fun<- function(a) {1-(1-rho^2)*(1-(1-a)^2*rho^2)^(-1/(1-a)) }
ICA_alphas <- data.frame()  # Initialize an empty data frame
for (j in alpha) {
if (j > 1 + (1 / abs(rho))) {
stop("one of the alpha values does not meet the specific condition")
rownames(Results) <- NULL # Warning message
next  # Skip the current iteration
}
else if (j == 1) {
ICA_alpha <- ICA  # Assign ICA directly if alpha is 1
} else {
ICA_alpha <- ICA_alpha_fun(j)  # Otherwise, call the function
}
ICA_alphas <- rbind(ICA_alphas, data.frame(ICA_alpha = ICA_alpha))
}
ICA_alphas<- ICA_alphas[1:nrow(ICA_alphas),]
ICA_alphas<- as.numeric(ICA_alphas)
results.part_1 <- as.vector(cbind(T0T1, T0S0, T0S1, T1S0, T1S1, S0S1,  sigma.delta.T, sigma.delta.S, rho, ICA))
results.part_2<- as.vector(ICA_alphas)
results.part<- c(results.part_1,results.part_2)
if (!exists("Results")) {
Results <- data.frame(matrix(ncol = length(results.part), nrow = 0))
}
Results <- rbind(Results, results.part)
}
# Results <- rbind(Results, results.part)
# rownames(Results) <- NULL}
}
}
Results <- data.frame(Results)
rownames(Results) <- NULL
Total.Num.Matrices <- nrow(combins)
fit <-
list(Total.Num.Matrices=Total.Num.Matrices, Pos.Def=Results[,1:6], rho=Results$rho, Sigmas=Results[,7:8], ICA=Results$ICA, ICA_alpha=Results[,11:length(results.part)], Call=match.call())
class(fit) <- "ICA_alpha_ContCont"
fit
}
library(testthat)
test_that("ICA_alpha_ContCont", {
alpha = 1.25
T0S0 = 0.9597334
T1S1=0.9644139
T0T0=544.3285
T1T1=550.6597
S0S0=180.6831
S1S1=180.9433
T0T1=-0.9
T0S1=-0.9
T1S0=-0.9
S0S1=-0.9
log_lik = ICA_alpha_ContCont(alpha=1.25, T0S0 = 0.9597334, T1S1=0.9644139, T0T0=544.3285, T1T1=550.6597, S0S0=180.6831, S1S1=180.9433, T0T1=-0.9,
T0S1=-0.9 , T1S0=-0.9 , S0S1=-0.9)
expect_equal(log_lik$ICA_alpha,0.969151472)
})
test_that("ICA_alpha_ContCont", {
alpha = 5
T0S0 = 0.9597334
T1S1=0.9644139
T0T0=544.3285
T1T1=550.6597
S0S0=180.6831
S1S1=180.9433
T0T1=-0.9
T0S1=-0.9
T1S0=-0.9
S0S1=-0.9
log_lik = ICA_alpha_ContCont(alpha=5, T0S0 = 0.9597334, T1S1=0.9644139, T0T0=544.3285, T1T1=550.6597, S0S0=180.6831, S1S1=180.9433, T0T1=-0.9,
T0S1=-0.9 , T1S0=-0.9 , S0S1=-0.9)
expect_equal(log_lik$ICA_alpha, NaN)
})
##test2
test_that("ICA_alpha_ContCont", {
alpha = 5
T0S0 = 0.9597334
T1S1=0.9644139
T0T0=544.3285
T1T1=550.6597
S0S0=180.6831
S1S1=180.9433
T0T1=-0.9
T0S1=-0.9
T1S0=-0.9
S0S1=-0.9
log_lik = ICA_alpha_ContCont(alpha=5, T0S0 = 0.9597334, T1S1=0.9644139, T0T0=544.3285, T1T1=550.6597, S0S0=180.6831, S1S1=180.9433, T0T1=-0.9,
T0S1=-0.9 , T1S0=-0.9 , S0S1=-0.9)
expect_equal(log_lik$ICA_alpha, "one of the alpha values does not meet the specific condition")
})
##test2
test_that("ICA_alpha_ContCont", {
alpha = 5
T0S0 = 0.9597334
T1S1=0.9644139
T0T0=544.3285
T1T1=550.6597
S0S0=180.6831
S1S1=180.9433
T0T1=-0.9
T0S1=-0.9
T1S0=-0.9
S0S1=-0.9
log_lik = ICA_alpha_ContCont(alpha=5, T0S0 = 0.9597334, T1S1=0.9644139, T0T0=544.3285, T1T1=550.6597, S0S0=180.6831, S1S1=180.9433, T0T1=-0.9,
T0S1=-0.9 , T1S0=-0.9 , S0S1=-0.9)
expect_equal(log_lik$ICA_alpha, Error)
})
##test2
test_that("ICA_alpha_ContCont", {
alpha = c(0.1, 1.25, 2)
T0S0 = 0.9597334
T1S1=0.9644139
T0T0=544.3285
T1T1=550.6597
S0S0=180.6831
S1S1=180.9433
T0T1=-0.9
T0S1=-0.9
T1S0=-0.9
S0S1=-0.9
log_lik = ICA_alpha_ContCont(alpha=c(0.1, 1.25, 2), T0S0 = 0.9597334, T1S1=0.9644139, T0T0=544.3285, T1T1=550.6597, S0S0=180.6831, S1S1=180.9433, T0T1=-0.9,
T0S1=-0.9 , T1S0=-0.9 , S0S1=-0.9)
expect_equal(log_lik$ICA_alpha, 0.7896052, 0.9691515, 0.9984384)
})
##test2
test_that("ICA_alpha_ContCont", {
alpha = c(0.1, 1.25, 2)
T0S0 = 0.9597334
T1S1=0.9644139
T0T0=544.3285
T1T1=550.6597
S0S0=180.6831
S1S1=180.9433
T0T1=-0.9
T0S1=-0.9
T1S0=-0.9
S0S1=-0.9
log_lik = ICA_alpha_ContCont(alpha=c(0.1, 1.25, 2), T0S0 = 0.9597334, T1S1=0.9644139, T0T0=544.3285, T1T1=550.6597, S0S0=180.6831, S1S1=180.9433, T0T1=-0.9,
T0S1=-0.9 , T1S0=-0.9 , S0S1=-0.9)
expect_equal(log_lik$ICA_alpha, c(0.7896052, 0.9691515, 0.9984384))
})
##test2
test_that("ICA_alpha_ContCont", {
alpha = c(0.1, 1.25, 2)
T0S0 = 0.9597334
T1S1=0.9644139
T0T0=544.3285
T1T1=550.6597
S0S0=180.6831
S1S1=180.9433
T0T1=-0.9
T0S1=-0.9
T1S0=-0.9
S0S1=-0.9
log_lik = ICA_alpha_ContCont(alpha=c(0.1, 1.25, 2), T0S0 = 0.9597334, T1S1=0.9644139, T0T0=544.3285, T1T1=550.6597, S0S0=180.6831, S1S1=180.9433, T0T1=-0.9,
T0S1=-0.9 , T1S0=-0.9 , S0S1=-0.9)
expect_equal(log_lik$ICA_alpha, c(0.789605, 0.969151472, 0.9984384))
})
test_that("ICA_alpha_ContCont", {
alpha = c(0.1, 1.25, 2)
T0S0 = 0.9597334
T1S1=0.9644139
T0T0=544.3285
T1T1=550.6597
S0S0=180.6831
S1S1=180.9433
T0T1=-0.9
T0S1=-0.9
T1S0=-0.9
S0S1=-0.9
log_lik = ICA_alpha_ContCont(alpha=c(0.1, 1.25, 2), T0S0 = 0.9597334, T1S1=0.9644139, T0T0=544.3285, T1T1=550.6597, S0S0=180.6831, S1S1=180.9433, T0T1=-0.9,
T0S1=-0.9 , T1S0=-0.9 , S0S1=-0.9)
expect_equal(round(log_lik$ICA_alpha,4), c(0.7896, 0.9692, 0.9984))
})
##test2
test_that("ICA_alpha_ContCont", {
alpha = c(0.1, 1.25, 2)
T0S0 = 0.9597334
T1S1=0.9644139
T0T0=544.3285
T1T1=550.6597
S0S0=180.6831
S1S1=180.9433
T0T1=-0.9
T0S1=-0.9
T1S0=-0.9
S0S1=-0.9
log_lik = ICA_alpha_ContCont(alpha=c(0.1, 1.25, 2), T0S0 = 0.9597334, T1S1=0.9644139, T0T0=544.3285, T1T1=550.6597, S0S0=180.6831, S1S1=180.9433, T0T1=-0.9,
T0S1=-0.9 , T1S0=-0.9 , S0S1=-0.9)
expect_equal(round(log_lik$ICA_alpha,4), data.frame(0.7896, 0.9692, 0.9984))
})
##test2
test_that("ICA_alpha_ContCont", {
alpha = c(0.1, 1.25, 2)
T0S0 = 0.9597334
T1S1=0.9644139
T0T0=544.3285
T1T1=550.6597
S0S0=180.6831
S1S1=180.9433
T0T1=-0.9
T0S1=-0.9
T1S0=-0.9
S0S1=-0.9
log_lik = ICA_alpha_ContCont(alpha=c(0.1, 1.25, 2), T0S0 = 0.9597334, T1S1=0.9644139, T0T0=544.3285, T1T1=550.6597, S0S0=180.6831, S1S1=180.9433, T0T1=-0.9,
T0S1=-0.9 , T1S0=-0.9 , S0S1=-0.9)
expect_equal(round(log_lik$ICA_alpha$ICA_0.1,4), 0.7896)
})
##test3
test_that("ICA_alpha_ContCont", {
alpha = c(0.1, 1.25, 2)
T0S0 = 0.9597334
T1S1=0.9644139
T0T0=544.3285
T1T1=550.6597
S0S0=180.6831
S1S1=180.9433
T0T1=-0.9
T0S1=-0.9
T1S0=-0.9
S0S1=-0.9
log_lik = ICA_alpha_ContCont(alpha=c(0.1, 1.25, 2), T0S0 = 0.9597334, T1S1=0.9644139, T0T0=544.3285, T1T1=550.6597, S0S0=180.6831, S1S1=180.9433, T0T1=-0.9,
T0S1=-0.9 , T1S0=-0.9 , S0S1=-0.9)
expect_equal(round(log_lik$ICA_alpha$ICA_1.25,4), 0.9692)
})
##test4
test_that("ICA_alpha_ContCont", {
alpha = 10
T0S0 = 0.9597334
T1S1=0.9644139
T0T0=544.3285
T1T1=550.6597
S0S0=180.6831
S1S1=180.9433
T0T1=-0.9
T0S1=-0.9
T1S0=-0.9
S0S1=-0.9
log_lik = ICA_alpha_ContCont(alpha=c(0.1, 1.25, 2), T0S0 = 0.9597334, T1S1=0.9644139, T0T0=544.3285, T1T1=550.6597, S0S0=180.6831, S1S1=180.9433, T0T1=-0.9,
T0S1=-0.9 , T1S0=-0.9 , S0S1=-0.9)
expect_equal(round(log_lik$ICA_alpha,4), "Error")
})
